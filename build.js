#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ ÂºÄÂßãÊûÑÂª∫ AI Book Reader...');

// Ê∏ÖÁêÜ‰πãÂâçÁöÑÊûÑÂª∫
if (fs.existsSync('dist')) {
    console.log('üßπ Ê∏ÖÁêÜ‰πãÂâçÁöÑÊûÑÂª∫Êñá‰ª∂...');
    execSync('rm -rf dist', { stdio: 'inherit' });
}

// Ëé∑ÂèñÂπ≥Âè∞ÂèÇÊï∞
const platform = process.argv[2] || 'current';

try {
    switch (platform) {
        case 'mac':
            console.log('üçé ÊûÑÂª∫ macOS ÁâàÊú¨...');
            execSync('npm run build:mac', { stdio: 'inherit' });
            break;
        case 'win':
            console.log('ü™ü ÊûÑÂª∫ Windows ÁâàÊú¨...');
            execSync('npm run build:win', { stdio: 'inherit' });
            break;
        case 'linux':
            console.log('üêß ÊûÑÂª∫ Linux ÁâàÊú¨...');
            execSync('npm run build:linux', { stdio: 'inherit' });
            break;
        case 'all':
            console.log('üåç ÊûÑÂª∫ÊâÄÊúâÂπ≥Âè∞ÁâàÊú¨...');
            execSync('npm run build:mac', { stdio: 'inherit' });
            execSync('npm run build:win', { stdio: 'inherit' });
            execSync('npm run build:linux', { stdio: 'inherit' });
            break;
        case 'current':
        default:
            console.log('üíª ÊûÑÂª∫ÂΩìÂâçÂπ≥Âè∞ÁâàÊú¨...');
            execSync('npm run build', { stdio: 'inherit' });
            break;
    }

    console.log('‚úÖ ÊûÑÂª∫ÂÆåÊàêÔºÅ');
    console.log('üì¶ ÊûÑÂª∫Êñá‰ª∂‰Ωç‰∫é dist/ ÁõÆÂΩï');
    
    // ÊòæÁ§∫ÊûÑÂª∫ÁªìÊûú
    if (fs.existsSync('dist')) {
        const files = fs.readdirSync('dist');
        console.log('\nüìã ÊûÑÂª∫‰∫ßÁâ©Ôºö');
        files.forEach(file => {
            const filePath = path.join('dist', file);
            const stats = fs.statSync(filePath);
            const size = (stats.size / 1024 / 1024).toFixed(2);
            console.log(`  - ${file} (${size} MB)`);
        });
    }

} catch (error) {
    console.error('‚ùå ÊûÑÂª∫Â§±Ë¥•:', error.message);
    process.exit(1);
} 